package com.cydeo.day_7;

import com.cydeo.pojo.Spartan_single;
import com.cydeo.shortvideo_task.POJO_deserialization.Spartan;
import com.cydeo.utility.SpatanTestBase;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import io.restassured.http.ContentType;
import io.restassured.internal.mapping.Jackson1Mapper;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given; // static import RestAssured
import static org.junit.jupiter.api.Assertions.*; // static import, no need call Assetrion anymore

public class Practice_POST_command extends SpatanTestBase {

    @DisplayName("POST spartan with String body")
    @Test
    public void Test1() {
        /**
         Given accept type and Content type is JSON
         And request json body is:
         {
         "gender":"Male",
         "name":"John Doe",
         "phone":8877445596
         }
         When user sends POST request to '/api/spartans'
         Then status code 201
         And content type should be application/json
         And json payload/response/body should contain:
         verify the success value is A Spartan is Born!
         "name": "John Doe",
         "gender": "Male",
         "phone": 1231231231
         */
        String requestBody = " {\n" + // ID will autogenerated, we will see it automatically in responce
                "         \"gender\":\"Male\",\n" +
                "         \"name\":\"John Doe\",\n" +
                "         \"phone\":8877445596\n" +
                "         }";

        String expectedMessage = "A Spartan is Born!";

        JsonPath jsonPath = given().accept(ContentType.JSON).// we expect respons in that format
                log().body(). // optionally, just to see body which we send to POST in DB
                contentType(ContentType.JSON). // we send POST request in that format
                body(requestBody). // we send body of POST request in String format
                when().
                post("api/spartans").// we sent POST command + needed endPoint
                        prettyPeek(). // to see success message and assert it
                        then(). // for making assertion write in response
                        statusCode(201).// assert status code
                        contentType("application/json").// content  type of response
                        extract().jsonPath(); // extract jsonPath to futher assertion


        assertEquals(expectedMessage, jsonPath.getString("success"));
        assertEquals("John Doe", jsonPath.getString("data.name"));
        assertEquals("Male", jsonPath.getString("data.gender"));
        assertEquals(8877445596l, jsonPath.getLong("data.phone"));

        // What if I want to get id. AND IMPORTANT ID WILL BE ALWAYS NEW, WITH EVERY POST new Spartan, because it generated automatically
        int id = jsonPath.getInt("data.id");
        System.out.println("id = " + id);


/* // this is response from API after POST command executed
// we took that messege from POSTMAN
        verify the success value is A Spartan is Born!
                "name": "John Doe",
                "gender": "Male",
                "phone": 1231231231
                */


// if we will run again - it will create new spartan with new ID, each run create new spartan!!!!!!!!!!!!!!!!!!!

    }

    @DisplayName("POST spartan with MAP body")
    @Test
    public void Test2() {
        /**
         Given accept type and Content type is JSON
         And request json body is:
         {
         "gender":"Male",
         "name":"John Doe",
         "phone":8877445596
         }
         When user sends POST request to '/api/spartans'
         Then status code 201
         And content type should be application/json
         And json payload/response/body should contain:
         verify the success value is A Spartan is Born!
         "name": "John Doe",
         "gender": "Male",
         "phone": 1231231231
         */


        // can we create spartan util to create dynamic spartan as Map to use in request?
        //yes and. Insted creation that Map manually we can call method, which will create Map for as based on given values (method - getStartanAsMap)

        Map<String, Object> requestMap = new HashMap<>();
        requestMap.put("name", "Sergei");
        requestMap.put("gender", "Male");
        requestMap.put("phone", 1234567890l);

        // we can not add more info, because swagger do not allow it


        String expectedMessage = "A Spartan is Born!";

        JsonPath jsonPath = given().accept(ContentType.JSON).// we expect respons in that format

                contentType(ContentType.JSON). // we send POST request in that format
                body(requestMap). // we send body of POST request in MAP format/ it will do serialization automaticaly -> convert Map structure to JSON body format (with help of Jackson-bind/ or GSON - can do it if we add that dependancy). Jackson/GSON - are two different object mapper
                when().
                post("api/spartans").// we sent POST command + needed endPoint
                        prettyPeek(). // to see success message and assert it
                        then(). // for making assertion write in response
                        statusCode(201).// assert status code
                        contentType("application/json").// content  type of response
                        extract().jsonPath(); // extract jsonPath to futher assertion

        assertEquals(expectedMessage, jsonPath.getString("success"));
        assertEquals("Sergei", jsonPath.getString("data.name"));
        assertEquals("Male", jsonPath.getString("data.gender"));
        assertEquals(1234567890l, jsonPath.getLong("data.phone"));

        // What if I want to get id. AND IMPORTANT ID WILL BE ALWAYS NEW, WITH EVERY POST new Spartan, because it generated automatically
        int id = jsonPath.getInt("data.id");
        System.out.println("id = " + id);


    }

    @DisplayName("POST spartan with Spartan POJO class")
    @Test
    public void Test3() {
        /**
         Given accept type and Content type is JSON
         And request json body is:
         {
         "gender":"Male",
         "name":"John Doe",
         "phone":8877445596
         }
         When user sends POST request to '/api/spartans'
         Then status code 201
         And content type should be application/json
         And json payload/response/body should contain:
         verify the success value is A Spartan is Born!
         "name": "John Doe",
         "gender": "Male",
         "phone": 1231231231
         */

        Spartan_single requestBodyFromPOJO = new Spartan_single(); // create object from POJO Spartan_single class

        // We no need initialize id value, which we have in POJO class, because POST spartans not accept id (generate it automatically) so we use in POJO Spartan_single class @JsonIgnoreProperties(value = "id", allowGetters = true) // that annotation help ignore initialization of id when we create object (if we do not initialize id intendly , but it allows to getter
        // we not create id - and  @JsonIgnoreProperties(value = "id", allowGetters = true) from POJO class handle it
        requestBodyFromPOJO.setName("Katy"); // use setter method to initialize variable
        requestBodyFromPOJO.setGender("Female");// use setter method to initialize variable
        requestBodyFromPOJO.setPhone(1233456765l);// use setter method to initialize variable


        // we can not add more info, because swagger do not allow it


        String expectedMessage = "A Spartan is Born!";

        JsonPath jsonPath = given().accept(ContentType.JSON).// we expect respons in that format

                contentType(ContentType.JSON). // we send POST request in that format
                log().body(). // to see body which we sent
                body(requestBodyFromPOJO). // we send body of POST request in POJO object format/ it will do serialization automaticaly -> convert Map structure to JSON body format (with help of Jackson-bind/ or GSON - can do it if we add that dependancy). Jackson/GSON - are two different object mapper
                when().
                post("api/spartans").// we sent POST command + needed endPoint
                        prettyPeek(). // to see success message and assert it
                        then(). // for making assertion write in response
                        statusCode(201).// assert status code
                        contentType("application/json").// content  type of response
                        extract().jsonPath(); // extract jsonPath to futher assertion

        assertEquals(expectedMessage, jsonPath.getString("success"));
        assertEquals(requestBodyFromPOJO.getName(), jsonPath.getString("data.name")); // because we have POJO Obgect we use getmethod for assertion
        assertEquals(requestBodyFromPOJO.getGender(), jsonPath.getString("data.gender"));// because we have POJO Obgect we use getmethod for assertion
        assertEquals(requestBodyFromPOJO.getPhone(), jsonPath.getLong("data.phone"));// because we have POJO Obgect we use getmethod for assertion

        // What if I want to get id. AND IMPORTANT ID WILL BE ALWAYS NEW, WITH EVERY POST new Spartan, because it generated automatically
        int id = jsonPath.getInt("data.id");
        System.out.println(id);
    }


    @DisplayName("POST spartan with Spartan POJO class and GET same spartan")
    @Test
    public void Test4() {
        /**
         Given accept type and Content type is JSON
         And request json body is:
         {
         "gender":"Male",
         "name":"John Doe",
         "phone":8877445596
         }
         When user sends POST request to '/api/spartans'
         Then status code 201
         And content type should be application/json
         And json payload/response/body should contain:
         verify the success value is A Spartan is Born!
         "name": "John Doe",
         "gender": "Male",
         "phone": 1231231231
         */

        Spartan_single requestBodyFromPOJOPOST = new Spartan_single(); // create object from POJO Spartan_single class

        // We no need initialize id value, which we have in POJO class, because POST spartans not accept id (generate it automatically) so we use in POJO Spartan_single class @JsonIgnoreProperties(value = "id", allowGetters = true) // that annotation help ignore initialization of id when we create object (if we do not initialize id intendly , but it allows to getter
        // we not create id - and  @JsonIgnoreProperties(value = "id", allowGetters = true) from POJO class handle it
        requestBodyFromPOJOPOST.setName("Katy"); // use setter method to initialize variable
        requestBodyFromPOJOPOST.setGender("Female");// use setter method to initialize variable
        requestBodyFromPOJOPOST.setPhone(1233456765l);// use setter method to initialize variable


        // we can not add more info, because swagger do not allow it


        String expectedMessage = "A Spartan is Born!";

        // POST Spartan
       JsonPath jsonPath = given().accept(ContentType.JSON).// we expect respons in that format
                contentType(ContentType.JSON). // we send POST request in that format
                log().body(). // to see body which we sent
                body(requestBodyFromPOJOPOST). // we send body of POST request in POJO object format/ it will do serialization automaticaly -> convert Map structure to JSON body format (with help of Jackson-bind/ or GSON - can do it if we add that dependancy). Jackson/GSON - are two different object mapper
                when().
                post("api/spartans").// we sent POST command + needed endPoint
                        prettyPeek(). // to see success message and assert it
                        then(). // for making assertion write in response
                        statusCode(201).// assert status code
                        contentType("application/json").// content  type of response
                        extract().jsonPath();

              // we can chane - as well  getInt("id");// extract jsonPath to further assertion and get id value right away in order to check id.

        // What if I want to get id. AND IMPORTANT ID WILL BE ALWAYS NEW, WITH EVERY POST new Spartan, because it generated automatically

        int idFormPost = jsonPath.getInt("data.id"); // we will use that variable to GET newly added spartan, by pathParam in Get request (see below)
        System.out.println(idFormPost);

        //GET Spartan -> so we POST spartan then right away GET newly created spartan for assertion
      Spartan_single spartan_singleGet =  given().accept(ContentType.JSON).pathParam("id", idFormPost).when().
                get("/api/spartans/{id}").
                then().statusCode(200).contentType("application/json"). // assertion with hamCrest
                extract().jsonPath().getObject("", Spartan_single.class);// we deserialize get result to object from POJO spartan_single class

        // same result
//Spartan_single spartan_single = jsonPath.getObject("", Spartan_single.class); // deserialization with Spartan_single POJO class


        System.out.println("Get new Spartan = " + spartan_singleGet);

        // assert names
        Assertions.assertEquals(requestBodyFromPOJOPOST.getName(), spartan_singleGet.getName());
        System.out.println(spartan_singleGet.getName());



    }

}
